
from numpy import *
import matplotlib.pyplot as plt
import operator
def createDataSet():
    group=array([[1.0,1.1],[1.0,1.0],[0,0],[0,0.1]])
    labels=['A','A','B','B']
    return group,labels
def classify0(inX,dataSet,labels,k):
    #得到数组行数，知道有几组训练数据
    dataSetSize=dataSet.shape[0] 
    #测试样本可能是一个数组，而训练样本是四个数组，所以要把它弄成一样的,求差
    diffMat=tile(inX,(dataSetSize,1))-dataSet
    sqDiffMat=diffMat**2
    #每一行相加合并
    sqDistances=sqDiffMat.sum(axis=1)
    #开根号
    distances=sqDistances**0.5
    #按照行进行索引排序，而不是内容排序
    sortedDistIndicies=distances.argsort()

    # 2 选择距离最小的k个点
    classCount={}
    for i in range(k):
        #找到这个类型
        voteIlabel=labels[sortedDistIndicies[i]]
        #在字典中这个类型+1，get函数返回对应键的值，如果不在，返回0
        classCount[voteIlabel]=classCount.get(voteIlabel,0)+1
        # 3 排序并返回出现最多的类型
    sortedClassCount=sorted(classCount.items(),key=operator.itemgetter(1),reverse=True)
    return sortedClassCount[0][0]
def file2matrix(filename):
    fr=open(filename)
    arrayOLines=fr.readlines()
    numberOfLines=len(arrayOLines)
    #创建一个矩阵，参数是行数和列数
    returnMat=zeros((numberOfLines,3))
    classLabelVector=[]
    index=0
    for line in arrayOLines:
        line=line.strip()#移除字符串中的回车的字符（比如空格或者感叹号）
        listFromLine=line.split('\t')#指定的字符串 分割
        returnMat[index,:]=listFromLine[0:3] # 把值按照行排列一一放到矩阵中
        classLabelVector.append(int(listFromLine[-1]))# 元素是数值类型
        index+=1
    return returnMat,classLabelVector
datingDataMat,datingLabels=file2matrix('datingTestSet.txt')
fig=plt.figure()
ax=fig.add_subplot(111)
ax.scatter(datingDataMat[:,1],datingDataMat[:,2],15.0*array(datingLabels),15.0*array(datingLabels))
plt.show()
"""
归一化处理
newValue=(oldValue-min)/(max-min)
"""
def autoNorm(dataSet):
    minVals=dataSet.min(0)#求的是矩阵每一列的最小值，返回的是1*3的矩阵，因为dataSet本身是1000*3的矩阵
    maxVals=dataSet.max(0)
    ranges=maxVals-minVals
    #shape(矩阵)快速读取矩阵，然后置0
    normDataSet=zeros(shape(dataSet))
    m=dataSet.shape[0]#shape(0)求的是矩阵行数，shape(1)求的是矩阵列数
    #tile(minVals,(m,1))创建以minVals为值的行列矩阵
    normDataSet=dataSet-tile(minVals,(m,1))
    #tile(ranges,(m,1))创建每个值都是ranges的矩阵
    #并非是矩阵除法，而是矩阵对应位置相除
    normDataSet=normDataSet/tile(ranges,(m,1))
    return normDataSet,ranges,minVals
def datingClassTest():
    hoRatio=0.10#测试集范围
    #从文件中加载数据
    datingDatMat,datingLabels=file2matrix('datingTestSet.txt')
    #归一化处理
    normMat,ranges,minVals=autoNorm(datingDataMat)
    m=normMat.shape[0]#shape(0)求的是矩阵行数
    #设置测试样本数量
    numTestVecs=int(m*hoRatio)
    errorCount=0.0
    for i in range(numTestVecs):
        #??????????????????????????????????????????????????????????????????????
        classifierResult=classify0(normMat[i,:],normMat[numTestVecs:m,:],datingLabels[numTestVecs:m],3)
        print("the classifier come back with:%d,the real answer is : %d"%(classifierResult,datingLabels[i]))
        if(classifierResult!=datingLabels[i]):
            errorCount+=1.0
        print ("the total error rate is: %f" %(errorCount/float(numTestVecs)))
def classifyPerson():
    resultlist=['not at all','in small doses','in large doses']
    percentTats=float(input("percentage of time spent playing video games?"))
    ffMiles=float(input("frequent flier miles earned per year?"))
    iceCream=float(input("liters of ice cream consumed per year?"))
    datingDataMat,datingLabels=file2matrix("datingTestSet.txt")
    normMat,ranges,minVals=autoNorm(datingDataMat)
    inArr=array([ffMiles,percentTats,iceCream])
    classifierResult=classify0((inArr-minVals)/ranges,normMat,datingLabels,3)
    print("you will like this person:",resultlist[classifierResult-1])
classifyPerson()
