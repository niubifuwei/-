
from numpy import *
import matplotlib.pyplot as plt
import operator
from os import listdir
def createDataSet():
    group=array([[1.0,1.1],[1.0,1.0],[0,0],[0,0.1]])
    labels=['A','A','B','B']
    return group,labels
def classify0(inX,dataSet,labels,k):
    #得到数组行数，知道有几组训练数据
    dataSetSize=dataSet.shape[0] 
    #测试样本可能是一个数组，而训练样本是四个数组，所以要把它弄成一样的,求差
    diffMat=tile(inX,(dataSetSize,1))-dataSet
    sqDiffMat=diffMat**2
    #每一行相加合并
    sqDistances=sqDiffMat.sum(axis=1)
    #开根号
    distances=sqDistances**0.5
    #按照行进行索引排序，而不是内容排序
    sortedDistIndicies=distances.argsort()

    # 2 选择距离最小的k个点
    classCount={}
    for i in range(k):
        #找到这个类型
        voteIlabel=labels[sortedDistIndicies[i]]
        #在字典中这个类型+1，get函数返回对应键的值，如果不在，返回0
        classCount[voteIlabel]=classCount.get(voteIlabel,0)+1
        # 3 排序并返回出现最多的类型
    sortedClassCount=sorted(classCount.items(),key=operator.itemgetter(1),reverse=True)
    return sortedClassCount[0][0]

def img2vector(filename):
    returnVect=zeros((1,1024))
    fr=open(filename)
    for i in range(32):
        lineStr=fr.readline()#循环遍历每一行
        for j in range(32):#循环遍历每个数字
            returnVect[0,32*i+j]=int(lineStr[j])#将每一个数字添加到创建的Numpy数组中
    return returnVect
def handwritingClassTest():
    hwLabels=[]
    trainingFileList=listdir('trainingDigits')#列出给定目录的文件名
    m=len(trainingFileList)
    trainingMat=zeros((m,1024))
    #从文件名解析分类数字
    for i in range(m):
        fileNameStr=trainingFileList[i]#获取每一个文件名
        fileStr=fileNameStr.split('.')[0]#将文件名和扩展名分开，取文件名
        classNumStr=int(fileStr.split('_')[0])#取文件名的第一个数字名
        hwLabels.append(classNumStr)
        #表达的是这个文件夹下的这个文件名
        trainingMat[i,:]=img2vector('trainingDigits/%s'% fileNameStr)
    testFileList=listdir('testDigits')
    errorCount=0.0
    mTest=len(testFileList)
    for i in range(mTest):
        fileNameStr=testFileList[i]
        fileStr=fileNameStr.split('.')[0]
        classNumStr=int(fileStr.split('_')[0])
        vectorUnderTest=img2vector('testDigits/%s'% fileNameStr)#一组一组的测试
        #通过KNN进行分类，并求得正确率
        classifierResult=classify0(vectorUnderTest,trainingMat,hwLabels,3)
        print("the classifier came back with:%d ,the real answer is:%d"%(classifierResult,classNumStr))
        if(classifierResult!=classNumStr):
            errorCount+=1.0
        print("\nthe total number of errors is : %d" %errorCount)
        print("\nthe total error rate is: %f"% (errorCount/float(mTest)))
handwritingClassTest()
            
